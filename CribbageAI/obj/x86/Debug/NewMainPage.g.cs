#pragma checksum "C:\Users\joelong\source\repos\CribbageAI\CribbageAI\NewMainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "13CD7FADE6E4F7867B6CBC124DCC3DF9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CribbageAI
{
    partial class NewMainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        private class NewMainPage_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            INewMainPage_Bindings
        {
            private global::CribbageAI.AvailablePlayer dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;

            public NewMainPage_obj2_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::CribbageAI.AvailablePlayer data = args.NewValue as global::CribbageAI.AvailablePlayer;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::CribbageAI.AvailablePlayer was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::CribbageAI.AvailablePlayer);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.TextBlock)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::CribbageAI.AvailablePlayer) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
            }

            // INewMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            // NewMainPage_obj2_Bindings

            public void SetDataRoot(global::CribbageAI.AvailablePlayer newDataRoot)
            {
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CribbageAI.AvailablePlayer obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj2.Target as global::Windows.UI.Xaml.Controls.TextBlock, obj, null);
                }
            }
        }

        private class NewMainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            INewMainPage_Bindings
        {
            private global::CribbageAI.NewMainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBox obj4;
            private global::Windows.UI.Xaml.Controls.TextBox obj5;
            private global::Windows.UI.Xaml.Controls.TextBox obj6;
            private global::Windows.UI.Xaml.Controls.TextBox obj7;
            private global::Windows.UI.Xaml.Controls.TextBox obj8;
            private global::Windows.UI.Xaml.Controls.TextBox obj9;
            private global::Windows.UI.Xaml.Controls.TextBox obj10;
            private global::Windows.UI.Xaml.Controls.TextBox obj11;
            private global::Windows.UI.Xaml.Controls.CheckBox obj14;
            private global::Windows.UI.Xaml.Controls.CheckBox obj15;
            private global::Windows.UI.Xaml.Controls.TextBox obj16;
            private global::Windows.UI.Xaml.Controls.ComboBox obj17;
            private global::Windows.UI.Xaml.Controls.ComboBox obj18;

            private NewMainPage_obj1_BindingsTracking bindingsTracking;

            public NewMainPage_obj1_Bindings()
            {
                this.bindingsTracking = new NewMainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj4).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.WallClocktime = (this.obj4).Text;
                                }
                            };
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj5).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.MSPerGame = (global::System.Double)this.LookupConverter("DoubleToStringConverter").ConvertBack((this.obj5).Text, typeof(global::System.Double), null, null);
                                }
                            };
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj6).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.AverageScorePlayerOne = (global::System.Double)this.LookupConverter("DoubleToStringConverter").ConvertBack((this.obj6).Text, typeof(global::System.Double), null, null);
                                }
                            };
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj7).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.AverageScorePlayerTwo = (global::System.Double)this.LookupConverter("DoubleToStringConverter").ConvertBack((this.obj7).Text, typeof(global::System.Double), null, null);
                                }
                            };
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj8).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerOneWinPercent = (global::System.Double)this.LookupConverter("DoubleToStringConverter").ConvertBack((this.obj8).Text, typeof(global::System.Double), null, null);
                                }
                            };
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj9).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerTwoWinPercent = (global::System.Double)this.LookupConverter("DoubleToStringConverter").ConvertBack((this.obj9).Text, typeof(global::System.Double), null, null);
                                }
                            };
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj10).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerOneWin = (global::System.Int32)this.LookupConverter("IntToStringConverter").ConvertBack((this.obj10).Text, typeof(global::System.Int32), null, null);
                                }
                            };
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj11).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerTwoWin = (global::System.Int32)this.LookupConverter("IntToStringConverter").ConvertBack((this.obj11).Text, typeof(global::System.Int32), null, null);
                                }
                            };
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        (this.obj14).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.AlternateWhoStarts = (this.obj14).IsChecked;
                                }
                            });
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        (this.obj15).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.UseLog = (this.obj15).IsChecked;
                                }
                            });
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj16).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.Iterations = (global::System.Int32)this.LookupConverter("IntToStringConverter").ConvertBack((this.obj16).Text, typeof(global::System.Int32), null, null);
                                }
                            };
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj17).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerTwo = (global::CribbageAI.AvailablePlayer)this.LookupConverter("ObjectToObjectValueConverter").ConvertBack((this.obj17).SelectedItem, typeof(global::CribbageAI.AvailablePlayer), null, null);
                                }
                            });
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj18).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PlayerOne = (global::CribbageAI.AvailablePlayer)this.LookupConverter("ObjectToObjectValueConverter").ConvertBack((this.obj18).SelectedItem, typeof(global::CribbageAI.AvailablePlayer), null, null);
                                }
                            });
                        break;
                    default:
                        break;
                }
            }

            // INewMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // NewMainPage_obj1_Bindings

            public void SetDataRoot(global::CribbageAI.NewMainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CribbageAI.NewMainPage obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_WallClocktime(obj.WallClocktime, phase);
                        this.Update_MSPerGame(obj.MSPerGame, phase);
                        this.Update_AverageScorePlayerOne(obj.AverageScorePlayerOne, phase);
                        this.Update_AverageScorePlayerTwo(obj.AverageScorePlayerTwo, phase);
                        this.Update_PlayerOneWinPercent(obj.PlayerOneWinPercent, phase);
                        this.Update_PlayerTwoWinPercent(obj.PlayerTwoWinPercent, phase);
                        this.Update_PlayerOneWin(obj.PlayerOneWin, phase);
                        this.Update_PlayerTwoWin(obj.PlayerTwoWin, phase);
                        this.Update_AlternateWhoStarts(obj.AlternateWhoStarts, phase);
                        this.Update_UseLog(obj.UseLog, phase);
                        this.Update_Iterations(obj.Iterations, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_AllPlayers(obj.AllPlayers, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PlayerTwo(obj.PlayerTwo, phase);
                        this.Update_PlayerOne(obj.PlayerOne, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_MSPerGame(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_AverageScorePlayerOne(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_AverageScorePlayerTwo(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_PlayerOneWinPercent(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_PlayerTwoWinPercent(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_PlayerOneWin(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_PlayerTwoWin(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_AlternateWhoStarts(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_UseLog(phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_Iterations(phase);
                    }
                }
            }
            private void Update_WallClocktime(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj4, obj, null);
                }
            }
            private void Update_MSPerGame(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj5, (global::System.String)this.LookupConverter("DoubleToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_AverageScorePlayerOne(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj6, (global::System.String)this.LookupConverter("DoubleToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_AverageScorePlayerTwo(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj7, (global::System.String)this.LookupConverter("DoubleToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayerOneWinPercent(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj8, (global::System.String)this.LookupConverter("DoubleToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayerTwoWinPercent(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj9, (global::System.String)this.LookupConverter("DoubleToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayerOneWin(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj10, (global::System.String)this.LookupConverter("IntToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayerTwoWin(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj11, (global::System.String)this.LookupConverter("IntToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_AlternateWhoStarts(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj14, obj, null);
                }
            }
            private void Update_UseLog(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj15, obj, null);
                }
            }
            private void Update_Iterations(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj16, (global::System.String)this.LookupConverter("IntToStringConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_AllPlayers(global::System.Collections.ObjectModel.ObservableCollection<global::CribbageAI.AvailablePlayer> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj17, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                }
            }
            private void Update_PlayerTwo(global::CribbageAI.AvailablePlayer obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj17, (global::System.Object)this.LookupConverter("ObjectToObjectValueConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_PlayerOne(global::CribbageAI.AvailablePlayer obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj18, (global::System.Object)this.LookupConverter("ObjectToObjectValueConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }

            private void UpdateFallback_MSPerGame(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj5, "430.0", null);
                }
            }

            private void UpdateFallback_AverageScorePlayerOne(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj6, "0", null);
                }
            }

            private void UpdateFallback_AverageScorePlayerTwo(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj7, "0", null);
                }
            }

            private void UpdateFallback_PlayerOneWinPercent(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj8, "10000", null);
                }
            }

            private void UpdateFallback_PlayerTwoWinPercent(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj9, "10000", null);
                }
            }

            private void UpdateFallback_PlayerOneWin(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj10, "10000", null);
                }
            }

            private void UpdateFallback_PlayerTwoWin(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj11, "10000", null);
                }
            }

            private void UpdateFallback_AlternateWhoStarts(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj14, (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), "true"), null);
                }
            }

            private void UpdateFallback_UseLog(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj15, (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), "true"), null);
                }
            }

            private void UpdateFallback_Iterations(int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj16, "10000", null);
                }
            }

            private class NewMainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<NewMainPage_obj1_Bindings> WeakRefToBindingObj; 

                public NewMainPage_obj1_BindingsTracking(NewMainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<NewMainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NewMainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::CribbageAI.NewMainPage obj = sender as global::CribbageAI.NewMainPage;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_WallClocktime(obj.WallClocktime, DATA_CHANGED);
                                    bindings.Update_MSPerGame(obj.MSPerGame, DATA_CHANGED);
                                    bindings.Update_AverageScorePlayerOne(obj.AverageScorePlayerOne, DATA_CHANGED);
                                    bindings.Update_AverageScorePlayerTwo(obj.AverageScorePlayerTwo, DATA_CHANGED);
                                    bindings.Update_PlayerOneWinPercent(obj.PlayerOneWinPercent, DATA_CHANGED);
                                    bindings.Update_PlayerTwoWinPercent(obj.PlayerTwoWinPercent, DATA_CHANGED);
                                    bindings.Update_PlayerOneWin(obj.PlayerOneWin, DATA_CHANGED);
                                    bindings.Update_PlayerTwoWin(obj.PlayerTwoWin, DATA_CHANGED);
                                    bindings.Update_AlternateWhoStarts(obj.AlternateWhoStarts, DATA_CHANGED);
                                    bindings.Update_UseLog(obj.UseLog, DATA_CHANGED);
                                    bindings.Update_Iterations(obj.Iterations, DATA_CHANGED);
                                    bindings.Update_PlayerTwo(obj.PlayerTwo, DATA_CHANGED);
                                    bindings.Update_PlayerOne(obj.PlayerOne, DATA_CHANGED);
                            }
                            else
                            {
                                bindings.UpdateFallback_MSPerGame(DATA_CHANGED);
                                bindings.UpdateFallback_AverageScorePlayerOne(DATA_CHANGED);
                                bindings.UpdateFallback_AverageScorePlayerTwo(DATA_CHANGED);
                                bindings.UpdateFallback_PlayerOneWinPercent(DATA_CHANGED);
                                bindings.UpdateFallback_PlayerTwoWinPercent(DATA_CHANGED);
                                bindings.UpdateFallback_PlayerOneWin(DATA_CHANGED);
                                bindings.UpdateFallback_PlayerTwoWin(DATA_CHANGED);
                                bindings.UpdateFallback_AlternateWhoStarts(DATA_CHANGED);
                                bindings.UpdateFallback_UseLog(DATA_CHANGED);
                                bindings.UpdateFallback_Iterations(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "WallClocktime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_WallClocktime(obj.WallClocktime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MSPerGame":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MSPerGame(obj.MSPerGame, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_MSPerGame(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AverageScorePlayerOne":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AverageScorePlayerOne(obj.AverageScorePlayerOne, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_AverageScorePlayerOne(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AverageScorePlayerTwo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AverageScorePlayerTwo(obj.AverageScorePlayerTwo, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_AverageScorePlayerTwo(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerOneWinPercent":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerOneWinPercent(obj.PlayerOneWinPercent, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_PlayerOneWinPercent(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerTwoWinPercent":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerTwoWinPercent(obj.PlayerTwoWinPercent, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_PlayerTwoWinPercent(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerOneWin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerOneWin(obj.PlayerOneWin, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_PlayerOneWin(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerTwoWin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerTwoWin(obj.PlayerTwoWin, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_PlayerTwoWin(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AlternateWhoStarts":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AlternateWhoStarts(obj.AlternateWhoStarts, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_AlternateWhoStarts(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UseLog":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UseLog(obj.UseLog, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_UseLog(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Iterations":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Iterations(obj.Iterations, DATA_CHANGED);
                                    }
                                    else
                                    {
                                    bindings.UpdateFallback_Iterations(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerTwo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerTwo(obj.PlayerTwo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayerOne":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerOne(obj.PlayerOne, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::CribbageAI.NewMainPage obj)
                {
                    NewMainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    this._uiHint = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 12:
                {
                    global::Windows.UI.Xaml.Controls.Button element12 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 52 "..\..\..\NewMainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element12).Click += this.OnClear;
                    #line default
                }
                break;
            case 13:
                {
                    global::Windows.UI.Xaml.Controls.Button element13 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 53 "..\..\..\NewMainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element13).Click += this.OnGo;
                    #line default
                }
                break;
            case 16:
                {
                    global::Windows.UI.Xaml.Controls.TextBox element16 = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    #line 44 "..\..\..\NewMainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.TextBox)element16).GotFocus += this.TextBoxGotFocus;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    NewMainPage_obj1_Bindings bindings = new NewMainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 2:
                {
                    global::Windows.UI.Xaml.Controls.TextBlock element2 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    NewMainPage_obj2_Bindings bindings = new NewMainPage_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::CribbageAI.AvailablePlayer) element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

